import requests
import json
import pandas as pd
from typing import List, Dict, Optional

class WebHDFSClient:
    def __init__(self, host: str = 'localhost', port: int = 9870, user: str = 'root'):
        self.base_url = f"http://{host}:{port}/webhdfs/v1"
        self.user = user
        self.session = requests.Session()
        self.session.timeout = 30
    
    def create_file(self, hdfs_path: str, content: str) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ HDFS"""
        url = f"{self.base_url}{hdfs_path}?op=CREATE&user.name={self.user}&overwrite=true"
        
        try:
            # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å - –ø–æ–ª—É—á–∞–µ–º URL –¥–ª—è –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            response = self.session.put(url, allow_redirects=False)
            
            if response.status_code == 307:  # Redirect to DataNode
                redirect_url = response.headers['Location']
                # –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å - –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                put_response = self.session.put(
                    redirect_url, 
                    data=content.encode('utf-8'),
                    headers={'Content-Type': 'application/octet-stream'}
                )
                
                if put_response.status_code in [200, 201]:
                    print(f"‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {hdfs_path}")
                    return True
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {put_response.status_code}")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False
    
    def read_file(self, hdfs_path: str) -> Optional[str]:
        """–ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ HDFS"""
        url = f"{self.base_url}{hdfs_path}?op=OPEN&user.name={self.user}"
        
        try:
            response = self.session.get(url)
            if response.status_code == 200:
                return response.text
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: {response.status_code}")
                return None
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return None
    
    def list_directory(self, hdfs_path: str = '/') -> List[Dict]:
        """–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        url = f"{self.base_url}{hdfs_path}?op=LISTSTATUS&user.name={self.user}"
        
        try:
            response = self.session.get(url)
            if response.status_code == 200:
                data = response.json()
                return data['FileStatuses']['FileStatus']
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∫–∞: {response.status_code}")
                return []
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return []
    
    def make_directory(self, hdfs_path: str) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        url = f"{self.base_url}{hdfs_path}?op=MKDIRS&user.name={self.user}"
        
        try:
            response = self.session.put(url)
            if response.status_code == 200:
                data = response.json()
                if data['boolean']:
                    print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: {hdfs_path}")
                    return True
                else:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: {hdfs_path}")
                    return False
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            return False

def main():
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    client = WebHDFSClient(host='localhost', port=9870)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å HDFS
    print("üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ HDFS...")
    try:
        test_response = requests.get('http://localhost:9870', timeout=10)
        if test_response.status_code == 200:
            print("‚úÖ HDFS WebUI –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print("‚ùå HDFS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ HDFS: {e}")
        return
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    test_dir = '/test_data'
    client.make_directory(test_dir)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    sample_data = [
        {"id": 1, "name": "–ò–≤–∞–Ω", "age": 25, "city": "–ú–æ—Å–∫–≤–∞", "salary": 50000},
        {"id": 2, "name": "–ú–∞—Ä–∏—è", "age": 30, "city": "–°–ü–±", "salary": 60000},
        {"id": 3, "name": "–ü–µ—Ç—Ä", "age": 35, "city": "–ö–∞–∑–∞–Ω—å", "salary": 55000}
    ]
    
    json_content = json.dumps(sample_data, indent=2, ensure_ascii=False)
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ HDFS
    file_path = f'{test_dir}/employees.json'
    if client.create_file(file_path, json_content):
        # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        print(f"\nüìÅ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ {test_dir}:")
        items = client.list_directory(test_dir)
        for item in items:
            item_type = "üìÅ DIR" if item['type'] == 'DIRECTORY' else "üìÑ FILE"
            print(f"{item_type} {item['length']:>8} bytes {item['pathSuffix']}")
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        print(f"\nüìñ –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ {file_path}:")
        content = client.read_file(file_path)
        if content:
            try:
                data = json.loads(content)
                print(f"üìä –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π")
                for item in data:
                    print(f"   üë§ {item['name']} - {item['city']}")
            except json.JSONDecodeError:
                print("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:")
                print(content)

if __name__ == "__main__":
    main()